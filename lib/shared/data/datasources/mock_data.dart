import 'dart:convert';
import 'dart:math';

import 'package:intl/intl.dart';
import 'package:yndx_homework/shared/data/datasources/remote/mappers.dart';
import 'package:yndx_homework/features/transactions/data/models/remote/category_dto.dart';
import 'package:yndx_homework/features/transactions/data/models/remote/transaction_response_dto.dart';
import 'package:yndx_homework/features/account/domain/models/account.dart';
import 'package:yndx_homework/features/articles/domain/models/article.dart';
import 'package:yndx_homework/features/transactions/domain/models/category.dart';
import 'package:yndx_homework/features/transactions/domain/models/transaction.dart';

final _rnd = Random();

final resp = """[
  {
    "id": 1,
    "name": "–ó–∞—Ä–ø–ª–∞—Ç–∞",
    "emoji": "üí∞",
    "isIncome": true
  },
  {
    "id": 2,
    "name": "–§—Ä–∏–ª–∞–Ω—Å",
    "emoji": "üíª",
    "isIncome": true
  },
  {
    "id": 3,
    "name": "–ü–æ–¥–∞—Ä–∫–∏",
    "emoji": "üéÅ",
    "isIncome": true
  },
  {
    "id": 4,
    "name": "–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥–∞–º",
    "emoji": "üè¶",
    "isIncome": true
  },
  {
    "id": 5,
    "name": "–í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞",
    "emoji": "üîÑ",
    "isIncome": true
  },
  {
    "id": 6,
    "name": "–ü—Ä–æ–¥–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞",
    "emoji": "üè†",
    "isIncome": true
  },
  {
    "id": 7,
    "name": "–ñ–∏–ª—å—ë",
    "emoji": "üè†",
    "isIncome": false
  },
  {
    "id": 8,
    "name": "–ü—Ä–æ–¥—É–∫—Ç—ã",
    "emoji": "üçé",
    "isIncome": false
  },
  {
    "id": 9,
    "name": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "emoji": "üöó",
    "isIncome": false
  },
  {
    "id": 10,
    "name": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "emoji": "üé≠",
    "isIncome": false
  },
  {
    "id": 11,
    "name": "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã",
    "emoji": "üçΩÔ∏è",
    "isIncome": false
  },
  {
    "id": 12,
    "name": "–û–¥–µ–∂–¥–∞",
    "emoji": "üëï",
    "isIncome": false
  },
  {
    "id": 13,
    "name": "–ó–¥–æ—Ä–æ–≤—å–µ",
    "emoji": "üè•",
    "isIncome": false
  },
  {
    "id": 14,
    "name": "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
    "emoji": "üí°",
    "isIncome": false
  },
  {
    "id": 15,
    "name": "–¢–µ—Ö–Ω–∏–∫–∞",
    "emoji": "üì±",
    "isIncome": false
  },
  {
    "id": 16,
    "name": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "emoji": "üìö",
    "isIncome": false
  },
  {
    "id": 17,
    "name": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
    "emoji": "‚úàÔ∏è",
    "isIncome": false
  },
  {
    "id": 18,
    "name": "–ü–æ–¥–ø–∏—Å–∫–∏",
    "emoji": "üì∫",
    "isIncome": false
  },
  {
    "id": 19,
    "name": "–ü–æ–¥–∞—Ä–∫–∏",
    "emoji": "üéÄ",
    "isIncome": false
  },
  {
    "id": 20,
    "name": "–ö—Ä–∞—Å–æ—Ç–∞",
    "emoji": "üíÑ",
    "isIncome": false
  },
  {
    "id": 21,
    "name": "–°–ø–æ—Ä—Ç",
    "emoji": "üèãÔ∏è",
    "isIncome": false
  },
  {
    "id": 22,
    "name": "–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ",
    "emoji": "üêæ",
    "isIncome": false
  },
  {
    "id": 23,
    "name": "–•–æ–±–±–∏",
    "emoji": "üé®",
    "isIncome": false
  },
  {
    "id": 24,
    "name": "–ö—Ä–µ–¥–∏—Ç—ã",
    "emoji": "üí≥",
    "isIncome": false
  }
]""";

final mockCategories =
    (jsonDecode(resp) as List).map((e) => CategoryDto.fromJson(e)).toList();

void main() {
  print(
    (jsonDecode(resp) as List).map((e) {
      return CategoryDto.fromJson(e);
    }),
  );
}

// MOCK ARTICLES
final List<Article> mockArticles = [
  Article(id: 1, text: '–ö–∞–∫ –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –æ—Ç–ø—É—Å–∫', emoji: 'üòÇ'),
  Article(id: 2, text: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö', emoji: 'üá∑üá∫'),
  Article(id: 3, text: '–≠–∫–æ–Ω–æ–º–∏–º –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö', emoji: 'ü•≥'),
  Article(id: 4, text: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ', emoji: 'ü™ô'),
  Article(id: 5, text: '–ö–∞–∫ –≤–µ—Å—Ç–∏ —Å–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç', emoji: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶'),
  Article(id: 6, text: '–ü–æ–≥–∞—à–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –±—ã—Å—Ç—Ä–µ–µ', emoji: 'üí≥'),
  Article(id: 7, text: '–í—ã–±–∏—Ä–∞–µ–º –≤—ã–≥–æ–¥–Ω—É—é –∏–ø–æ—Ç–µ–∫—É', emoji: 'üè†'),
  Article(id: 8, text: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', emoji: 'üõü'),
];

// MOCK ACCOUNT
Account mockAccount = Account(
  id: 0,
  name: 'Main Account',
  balance: 4000.01,
  currency: 'RUB',
);

// MOCK TRANSACTIONS
final List<Transaction> mockTransactions = [
  ...List.generate(10, (i) {
    final category =
        mockCategories[_rnd.nextInt(mockCategories.length)].toDomain();

    // Day 0 = today, Day 29 = 29 days ago (wrap every 30 items)
    // final date = DateTime.now().subtract(Duration(days: i % 30));
    final date = DateTime.now();

    // Roughly every 7-th item is an ‚Äúincome‚Äù
    final isIncome = category.isIncome;

    final double amount =
        isIncome
            // 15 000 ‚â§ amount ‚â§ 105 000
            ? 15_000 + _rnd.nextDouble() * 90_000
            // ‚Äì500 ‚â• amount ‚â• ‚Äì15 000
            : -(500 + _rnd.nextDouble() * 14_500);

    return Transaction(
      id: 0, // let DB auto-generate real IDs
      account: mockAccount,
      category: category,
      amount: double.parse(amount.toStringAsFixed(2)),
      transactionDate: date,
      comment:
          'Auto tx #${i + 1}  ‚Ä¢  '
          '${DateFormat('yyyy-MM-dd').format(date)}',
    );
  }),
];
