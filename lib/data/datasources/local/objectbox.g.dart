// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../data/models/local/account_entity.dart';
import '../../../data/models/local/category_entity.dart';
import '../../../data/models/local/transaction_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 1930924216488569758),
    name: 'AccountEntity',
    lastPropertyId: const obx_int.IdUid(4, 2962670302112480512),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6162387280736367855),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8604724686551519802),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 322794399568165033),
        name: 'balance',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2962670302112480512),
        name: 'currency',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 7153350534390383964),
    name: 'CategoryEntity',
    lastPropertyId: const obx_int.IdUid(4, 1449448222041827094),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6815499229416320724),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6992162516221074401),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7254229065208335716),
        name: 'emoji',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1449448222041827094),
        name: 'isIncome',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 6589889748139525854),
    name: 'TransactionEntity',
    lastPropertyId: const obx_int.IdUid(6, 3255317689472647356),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7271937693470775355),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 907392321256678845),
        name: 'accountId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 4474749691486538945),
        relationTarget: 'AccountEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1381580754785558294),
        name: 'categoryId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 7218867096032702561),
        relationTarget: 'CategoryEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2332132612360878797),
        name: 'amount',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2588781557277055635),
        name: 'transactionDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3255317689472647356),
        name: 'comment',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 6589889748139525854),
    lastIndexId: const obx_int.IdUid(2, 7218867096032702561),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    AccountEntity: obx_int.EntityDefinition<AccountEntity>(
      model: _entities[0],
      toOneRelations: (AccountEntity object) => [],
      toManyRelations: (AccountEntity object) => {},
      getId: (AccountEntity object) => object.id,
      setId: (AccountEntity object, int id) {
        object.id = id;
      },
      objectToFB: (AccountEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final currencyOffset = fbb.writeString(object.currency);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addFloat64(2, object.balance);
        fbb.addOffset(3, currencyOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = AccountEntity()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..balance = const fb.Float64Reader().vTableGet(
            buffer,
            rootOffset,
            8,
            0,
          )
          ..currency = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 10, '');

        return object;
      },
    ),
    CategoryEntity: obx_int.EntityDefinition<CategoryEntity>(
      model: _entities[1],
      toOneRelations: (CategoryEntity object) => [],
      toManyRelations: (CategoryEntity object) => {},
      getId: (CategoryEntity object) => object.id,
      setId: (CategoryEntity object, int id) {
        object.id = id;
      },
      objectToFB: (CategoryEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final emojiOffset = fbb.writeString(object.emoji);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, emojiOffset);
        fbb.addBool(3, object.isIncome);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = CategoryEntity()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..emoji = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..isIncome = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            10,
            false,
          );

        return object;
      },
    ),
    TransactionEntity: obx_int.EntityDefinition<TransactionEntity>(
      model: _entities[2],
      toOneRelations: (TransactionEntity object) => [
        object.account,
        object.category,
      ],
      toManyRelations: (TransactionEntity object) => {},
      getId: (TransactionEntity object) => object.id,
      setId: (TransactionEntity object, int id) {
        object.id = id;
      },
      objectToFB: (TransactionEntity object, fb.Builder fbb) {
        final commentOffset = object.comment == null
            ? null
            : fbb.writeString(object.comment!);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.account.targetId);
        fbb.addInt64(2, object.category.targetId);
        fbb.addFloat64(3, object.amount);
        fbb.addInt64(4, object.transactionDate.millisecondsSinceEpoch);
        fbb.addOffset(5, commentOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = TransactionEntity()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..amount = const fb.Float64Reader().vTableGet(
            buffer,
            rootOffset,
            10,
            0,
          )
          ..transactionDate = DateTime.fromMillisecondsSinceEpoch(
            const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
          )
          ..comment = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 14);
        object.account.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        object.account.attach(store);
        object.category.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.category.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AccountEntity] entity fields to define ObjectBox queries.
class AccountEntity_ {
  /// See [AccountEntity.id].
  static final id = obx.QueryIntegerProperty<AccountEntity>(
    _entities[0].properties[0],
  );

  /// See [AccountEntity.name].
  static final name = obx.QueryStringProperty<AccountEntity>(
    _entities[0].properties[1],
  );

  /// See [AccountEntity.balance].
  static final balance = obx.QueryDoubleProperty<AccountEntity>(
    _entities[0].properties[2],
  );

  /// See [AccountEntity.currency].
  static final currency = obx.QueryStringProperty<AccountEntity>(
    _entities[0].properties[3],
  );
}

/// [CategoryEntity] entity fields to define ObjectBox queries.
class CategoryEntity_ {
  /// See [CategoryEntity.id].
  static final id = obx.QueryIntegerProperty<CategoryEntity>(
    _entities[1].properties[0],
  );

  /// See [CategoryEntity.name].
  static final name = obx.QueryStringProperty<CategoryEntity>(
    _entities[1].properties[1],
  );

  /// See [CategoryEntity.emoji].
  static final emoji = obx.QueryStringProperty<CategoryEntity>(
    _entities[1].properties[2],
  );

  /// See [CategoryEntity.isIncome].
  static final isIncome = obx.QueryBooleanProperty<CategoryEntity>(
    _entities[1].properties[3],
  );
}

/// [TransactionEntity] entity fields to define ObjectBox queries.
class TransactionEntity_ {
  /// See [TransactionEntity.id].
  static final id = obx.QueryIntegerProperty<TransactionEntity>(
    _entities[2].properties[0],
  );

  /// See [TransactionEntity.account].
  static final account =
      obx.QueryRelationToOne<TransactionEntity, AccountEntity>(
        _entities[2].properties[1],
      );

  /// See [TransactionEntity.category].
  static final category =
      obx.QueryRelationToOne<TransactionEntity, CategoryEntity>(
        _entities[2].properties[2],
      );

  /// See [TransactionEntity.amount].
  static final amount = obx.QueryDoubleProperty<TransactionEntity>(
    _entities[2].properties[3],
  );

  /// See [TransactionEntity.transactionDate].
  static final transactionDate = obx.QueryDateProperty<TransactionEntity>(
    _entities[2].properties[4],
  );

  /// See [TransactionEntity.comment].
  static final comment = obx.QueryStringProperty<TransactionEntity>(
    _entities[2].properties[5],
  );
}
